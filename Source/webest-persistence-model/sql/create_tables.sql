-- CREATE TABLES --

CREATE TABLE ApplicationTypeGroup (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (id), 
	CONSTRAINT UNQ_ATG_NAME UNIQUE (name)
);
CREATE TABLE ApplicationType (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	"GROUP" INTEGER NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_AT_GROUP FOREIGN KEY ("GROUP") REFERENCES ApplicationTypeGroup (id) ON DELETE CASCADE
);
CREATE TABLE Country (
	code char(2) NOT NULL, 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (code), 
	CONSTRAINT UNQ_COUNTRY_NAME UNIQUE (name),
	CONSTRAINT CHK_COUNTRY_ACR CHECK (LENGTH(code) = 2 AND code = UPPER(code))
);
CREATE TABLE DefectCategory (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	included SMALLINT NOT NULL, 
	name VARCHAR(50), 
	percentage SMALLINT, 
	owner INTEGER NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_DC_INC CHECK (included = 1 OR included = 0),
	CONSTRAINT CHK_DC_PERC CHECK (percentage IS NULL OR (percentage >= 0 AND percentage <= 100))
);
CREATE TABLE EffortUnit (
	id VARCHAR(10) NOT NULL,
	name VARCHAR(50) NOT NULL,
	factor DOUBLE NOT NULL, 
	reference SMALLINT NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT UNQ_EU_NAME UNIQUE (name),
	CONSTRAINT CHK_EU_REF CHECK (reference = 1 OR reference = 0),
	CONSTRAINT CHK_EU_FACT CHECK (factor >= 0)
);
CREATE TABLE IndustrySectorGroup (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (id), 
	CONSTRAINT UNQ_ISG_NAME UNIQUE (name)
);
CREATE TABLE IndustrySector (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	"GROUP" INTEGER NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT FK_IS_GROUP FOREIGN KEY ("GROUP") REFERENCES IndustrySectorGroup (id) ON DELETE CASCADE
);
CREATE TABLE Organization (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT UNQ_ORG_NAME UNIQUE (name)
);
CREATE TABLE Division (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	organization INT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_DIV_ORG FOREIGN KEY (organization) REFERENCES Organization (id) ON DELETE CASCADE,
	CONSTRAINT UNQ_DIV_NAME UNIQUE (name)
);
CREATE TABLE Certainty (
	id CHAR(1) NOT NULL,
	name VARCHAR(50) NOT NULL,
	factor DOUBLE NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_CERT_FACT CHECK (factor >= 0 AND factor <= 1)
);
CREATE TABLE PiHistoryCategory (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT UNQ_PHC_NAME UNIQUE (name)
);
CREATE TABLE PiHistoryEntry (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	projectName VARCHAR(50) NOT NULL,
	category INT NOT NULL,
	pi INT NOT NULL,
	effort DOUBLE NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_PHE_CAT FOREIGN KEY (category) REFERENCES PiHistoryCategory (id) ON DELETE CASCADE
);
CREATE TABLE PiPpLookup (
	pi INT NOT NULL,
	pp INT NOT NULL,
	PRIMARY KEY (pi)
);
CREATE TABLE Role (
	id VARCHAR(20) NOT NULL,
	name VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT UNQ_ROLE_NAME UNIQUE (name),
	CONSTRAINT CHK_ROLE_ID CHECK (LENGTH(id) > 0 AND LOWER(id) = id)
);
CREATE TABLE "USER" (
	id VARCHAR(50) NOT NULL,
	firstName VARCHAR(50) NOT NULL,
	lastName VARCHAR(50) NOT NULL,
	password VARCHAR(32) NOT NULL,
	role VARCHAR(20),
	division INT,
	PRIMARY KEY (id),
	CONSTRAINT FK_USER_ROLE FOREIGN KEY (role) REFERENCES Role (id) ON DELETE SET NULL,
	CONSTRAINT FK_USER_DIV FOREIGN KEY (division) REFERENCES Division (id) ON DELETE SET NULL,
	CONSTRAINT CHK_USER_ID CHECK (LENGTH(id) > 0 AND LOWER(id) = id)
);
CREATE TABLE Phase (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	number SMALLINT NOT NULL, 
	name VARCHAR(50) NOT NULL, 
	acronym VARCHAR(10) NOT NULL, 
	description VARCHAR(4000),
	owner INTEGER NOT NULL,
	percentage SMALLINT,
	PRIMARY KEY (id),
	CONSTRAINT CHK_PHASE_NO CHECK (number >= 1 AND number <= 4),
	CONSTRAINT CHK_PHASE_PERC CHECK (percentage IS NULL OR (percentage >= 0 AND percentage <= 100))
);
CREATE TABLE Milestone (
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	milestoneId SMALLINT NOT NULL,
	owner INTEGER NOT NULL, 
	acronym VARCHAR(10) NOT NULL, 
	description VARCHAR(4000), 
	name VARCHAR(50) NOT NULL, 
	percentage SMALLINT NOT NULL, 
	phase INT,
	included SMALLINT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_MILST_INC CHECK (included = 1 OR included = 0),
	CONSTRAINT FK_MILST_PHASE FOREIGN KEY (phase) REFERENCES Phase (id) ON DELETE CASCADE,
	CONSTRAINT CHK_MILST_PERC CHECK (percentage >= 0 AND percentage <= 100)
);
CREATE TABLE MonetaryUnit (
	id VARCHAR(10) NOT NULL, 
	name VARCHAR(50) NOT NULL,
	factor DOUBLE NOT NULL, 
	reference SMALLINT NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT UNQ_MU_NAME UNIQUE (name),
	CONSTRAINT CHK_MU_REF CHECK (reference = 1 OR reference = 0),
	CONSTRAINT CHK_MU_FACT CHECK (factor >= 0)
);
CREATE TABLE MTTDTimeUnit (
	id VARCHAR(10) NOT NULL,
	name VARCHAR(50) NOT NULL,
	factor DOUBLE NOT NULL, 
	reference SMALLINT NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT UNQ_MTU_NAME UNIQUE (name),
	CONSTRAINT CHK_MTU_REF CHECK (reference = 1 OR reference = 0),
	CONSTRAINT CHK_MTU_FACT CHECK (factor >= 0)
);
CREATE TABLE Estimate (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	comment VARCHAR(4000), 
	creationDate TIMESTAMP NOT NULL,
	modifyDate TIMESTAMP NOT NULL,
	estimator VARCHAR(50) NOT NULL,
	lastEditor VARCHAR(50) NOT NULL,
	division INT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_EST_LE FOREIGN KEY (lastEditor) REFERENCES "USER" (id),
	CONSTRAINT FK_EST_EST FOREIGN KEY (estimator) REFERENCES "USER" (id),
	CONSTRAINT FK_EST_DIV FOREIGN KEY (division) REFERENCES Division (id)
);
CREATE TABLE Template (
	id INTEGER NOT NULL, 
	daysPerWeek SMALLINT NOT NULL, 
	hoursPerDay SMALLINT NOT NULL, 
	description VARCHAR(4000), 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (id), 
	CONSTRAINT UNQ_TPL_NAME UNIQUE (name),
	CONSTRAINT CHK_TPL_DPW CHECK (daysPerWeek >= 1 AND daysPerWeek <= 7),
	CONSTRAINT CHK_TPL_HPD CHECK (hoursPerDay >= 1 AND hoursPerDay <= 24)
);
CREATE TABLE ProjectEnvironment (
	id INTEGER NOT NULL, 
	daysPerWeek SMALLINT NOT NULL, 
	hoursPerDay SMALLINT NOT NULL, 
	projectDescription VARCHAR(4000), 
	projectName VARCHAR(50) NOT NULL, 
	applicationtype INTEGER NOT NULL, 
	country CHAR(2) NOT NULL, 
	effortunit VARCHAR(10) NOT NULL, 
	estimate INTEGER NOT NULL, 
	industrysector INTEGER NOT NULL, 
	monetaryunit VARCHAR(10) NOT NULL, 
	mttdtimeunit VARCHAR(10) NOT NULL,
	template INT,
	PRIMARY KEY (id),
	CONSTRAINT FK_PE_TPL FOREIGN KEY (template) REFERENCES Template (id),
	CONSTRAINT FK_PE_COUNTRY FOREIGN KEY (country) REFERENCES Country (code),
	CONSTRAINT FK_PE_AT FOREIGN KEY (applicationtype) REFERENCES ApplicationType (id),
	CONSTRAINT FK_PE_EU FOREIGN KEY (effortunit) REFERENCES EffortUnit (id),
	CONSTRAINT FK_PE_MU FOREIGN KEY (monetaryunit) REFERENCES MonetaryUnit (id),
	CONSTRAINT FK_PE_MTU FOREIGN KEY (mttdtimeunit) REFERENCES MTTDTimeUnit (id),
	CONSTRAINT FK_PE_EST FOREIGN KEY (estimate) REFERENCES Estimate (id) ON DELETE CASCADE,
	CONSTRAINT FK_PE_IS FOREIGN KEY (industrysector) REFERENCES IndustrySector (id),
	CONSTRAINT UNQ_PE_EST UNIQUE (estimate),
	CONSTRAINT CHK_PE_DPW CHECK (daysPerWeek >= 1 AND daysPerWeek <= 7),
	CONSTRAINT CHK_PE_HPD CHECK (hoursPerDay >= 1 AND hoursPerDay <= 24)
);
CREATE TABLE OPENJPASEQ (
	ID SMALLINT NOT NULL, 
	SEQUENCE_VALUE BIGINT,
	PRIMARY KEY (ID)
);
CREATE TABLE GranularityLevel (
	id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	"VALUE" SMALLINT NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT UNQ_GL_NAME UNIQUE (name)
);
CREATE TABLE Solution (
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	name VARCHAR(50) NOT NULL,
	estimate INT NOT NULL, 	
	pi INT,
	pp INT,
	gearingFactor INT NOT NULL,
	granularity SMALLINT NOT NULL,
	projectStartDate DATE NOT NULL,
	comment VARCHAR(4000),
	creationDate TIMESTAMP NOT NULL,
	modifyDate TIMESTAMP NOT NULL,
	lastEditor VARCHAR(50) NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_SOL_PI CHECK (pi IS NULL OR pi >= 1),
	CONSTRAINT CHK_SOL_PP CHECK (pp IS NULL OR pp >= 1),
	CONSTRAINT FK_SOL_LE FOREIGN KEY (lastEditor) REFERENCES "USER" (id),
	CONSTRAINT FK_SOL_EST FOREIGN KEY (estimate) REFERENCES Estimate (id) ON DELETE CASCADE,
	CONSTRAINT FK_SOL_GRAN FOREIGN KEY (granularity) REFERENCES GranularityLevel (id)
);
CREATE TABLE UseCasePack (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL,
	solution BIGINT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_UCP_SOL FOREIGN KEY (solution) REFERENCES Solution (id) ON DELETE CASCADE
);
CREATE TABLE UseCaseComplexity (
	id VARCHAR(3) NOT NULL, 
	name VARCHAR(50) NOT NULL,
	factor DOUBLE NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_UCC_ID CHECK (LENGTH(id) >=1 AND UPPER(id) = id)
);
CREATE TABLE UseCase (
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	multiplier DOUBLE NOT NULL,
	granularityOverride SMALLINT,
	assumptions VARCHAR(4000),
	inScope SMALLINT NOT NULL,
	certainty CHAR(1) NOT NULL,
	useCaseComplexity VARCHAR(3) NOT NULL,
	useCasePack INT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT CHK_UC_SCOPE CHECK (inScope = 1 OR inScope = 0),
	CONSTRAINT CHK_UC_MULT CHECK (multiplier >= 0),
	CONSTRAINT FK_UC_CERT FOREIGN KEY (certainty) REFERENCES Certainty (id),
	CONSTRAINT FK_UC_PACK FOREIGN KEY (useCasePack) REFERENCES UseCasePack (id) ON DELETE CASCADE,
	CONSTRAINT FK_UC_COMPL FOREIGN KEY (useCaseComplexity) REFERENCES UseCaseComplexity (id),
	CONSTRAINT FK_UC_GRAN FOREIGN KEY (granularityOverride) REFERENCES GranularityLevel (id)
);
CREATE TABLE "CONSTRAINT" (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"TYPE" VARCHAR(50) NOT NULL, 
	solution BIGINT NOT NULL, 
	target DOUBLE NOT NULL, 
	targetProbability SMALLINT, 
	PRIMARY KEY (id), 
	CONSTRAINT FK_CSTR_SOL FOREIGN KEY (solution) REFERENCES Solution (id) ON DELETE CASCADE,
	CONSTRAINT CHK_CSTR_TP CHECK (targetProbability >= 0 AND targetProbability <= 100)
);
CREATE TABLE GranularityQuestion (
	id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	factorName VARCHAR(20) NOT NULL, 
	level SMALLINT NOT NULL,
	question VARCHAR(4000) NOT NULL, 
	factor DOUBLE NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT FK_GQ_GL FOREIGN KEY (level) REFERENCES GranularityLevel (id)
);
CREATE TABLE StaffingShape (
	id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR(50) NOT NULL, 
	PRIMARY KEY (id),
	CONSTRAINT UNQ_SS_NAME UNIQUE (name)
);
CREATE TABLE Solution_StaffingShape (
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	phase INT NOT NULL,
	solution BIGINT NOT NULL,
	staffingShape SMALLINT NOT NULL,
	selected SMALLINT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT UNQ_SSS_PH_SOL_SS UNIQUE (phase, solution, staffingShape),
	CONSTRAINT FK_SSS_PHASE FOREIGN KEY (phase) REFERENCES Phase (id) ON DELETE CASCADE,
	CONSTRAINT FK_SSS_SOL FOREIGN KEY (solution) REFERENCES Solution (id) ON DELETE CASCADE,
	CONSTRAINT FK_SSS_SS FOREIGN KEY (staffingShape) REFERENCES StaffingShape (id) ON DELETE CASCADE,
	CONSTRAINT CHK_SSS_SEL CHECK (selected = 0 OR selected = 1)
);
CREATE TABLE Solution_GranularityQuestion (
	solution BIGINT NOT NULL,
	granularityQuestion INT NOT NULL,
	PRIMARY KEY (solution, granularityQuestion),
	CONSTRAINT FK_SGQ_GQ FOREIGN KEY (granularityQuestion) REFERENCES GranularityQuestion (id) ON DELETE CASCADE,
	CONSTRAINT FK_SGQ_SOL FOREIGN KEY (solution) REFERENCES Solution (id) ON DELETE CASCADE
);
CREATE TABLE CalculationParameter (
	"KEY" VARCHAR(50) NOT NULL,
	"VALUE" DOUBLE NOT NULL,
	PRIMARY KEY ("KEY")
);

